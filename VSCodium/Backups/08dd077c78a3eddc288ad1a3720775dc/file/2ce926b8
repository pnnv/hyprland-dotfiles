file:///home/pranav/code/E_Toward_0.cpp {"mtime":1728555362291,"ctime":1728555124319,"size":300,"etag":"3d5sr8csb9l","orphaned":false,"typeId":""}
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;


struct dsu {
public:
  dsu() : _n(0) {}
  explicit dsu(int n) : _n(n), parent_or_size(n, -1) {}

  int merge(int a, int b) {
	assert(0 <= a && a < _n);
	assert(0 <= b && b < _n);
	int x = leader(a), y = leader(b);
	if (x == y) return x;
	if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
	parent_or_size[x] += parent_or_size[y]; parent_or_size[y] = x;
	return x;
  }

  bool same(int a, int b) {
	assert(0 <= a && a < _n); assert(0 <= b && b < _n);
	return leader(a) == leader(b);
  }

  int leader(int a) {
	assert(0 <= a && a < _n);
	if (parent_or_size[a] < 0) return a;
	return parent_or_size[a] = leader(parent_or_size[a]);
  }

  int size(int a) {
	assert(0 <= a && a < _n);
	return -parent_or_size[leader(a)];
  }

  std::vector<std::vector<int>> groups() {
	std::vector<int> leader_buf(_n), group_size(_n);
	for (int i = 0; i < _n; i++) {
	  leader_buf[i] = leader(i); group_size[leader_buf[i]]++;
	}
	std::vector<std::vector<int>> result(_n);
	for (int i = 0; i < _n; i++) {
	  result[i].reserve(group_size[i]);
	}
	for (int i = 0; i < _n; i++) {
	  result[leader_buf[i]].push_back(i);
	}
	result.erase(
		std::remove_if(result.begin(), result.end(),
					   [&](const std::vector<int> &v) { return v.empty(); }),
		result.end());
	return result;
  }

private:
  int _n;
  std::vector<int> parent_or_size;
};


class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& v) {
        dsu d(n);
		int ext = 0, op = 0;
		for(auto i: v) {
			if(d.same(i[0] - 1, i[1] - 1)) ext++;
			else d.merge(i[0] - 1, i[1] - 1);
		}
		for(int i = 1; i < n; i++) {
			if(!d.same(0, i)) {
				op++;
				if(op > ext) return -1;
				d.merge(0, i);
			}
		}
		return  op;
    }
};

int32_t main() {
	ios::sync_with_stdio(false); cin.tie(0);
	
}